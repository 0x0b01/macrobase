#!/usr/bin/env python

import pandas as pd
import numpy as np
import sys
import os
import subprocess
import json
import argparse
import matplotlib.pyplot as plt

parser = argparse.ArgumentParser()
parser.add_argument("input_csv",
                    help="Input CSV path")
parser.add_argument("--sql_path",
                    default="bin/macrobase-sql",
                    help="Path to macrobase-sql")
parser.add_argument("--json_output",
                    default="output.json",
                    help="Path to JSON output")
parser.add_argument("--html_output",
                    default="output.html",
                    help="Path to HTML output")
parser.add_argument("--percentile",
                    default=0.99,
                    type=int,
                    help="Percentile to cut off outliers")
parser.add_argument("--max_results",
                    default=10,
                    type=int,
                    help="Maximum number of results")
parser.add_argument("--query_table",
                    default="query_table",
                    help="Query table name in MacroBase-SQL")
parser.add_argument("--results_filename",
                    default="results.csv",
                    help="MacroBase-SQL output CSV filename")
parser.add_argument("--query_filename",
                    default="query.mbsql",
                    help="MacroBase-SQL query file")
parser.add_argument("--metric_column",
                    default=None,
                    help="Metric column for analysis")
parser.add_argument("--verbose", "-v",
                    action="store_true",
                    help="Verbose output")

parser.add_argument("--hist_plot_bins",
                    default=20,
                    help="Number of bins in histogram plots")

args = parser.parse_args()

# RUN MACROBASE

# read headers from file
# since mb-sql can't handle nulls, we read in the entire DF
# in the future, can just do df = pd.read_csv(args.input_csv, nrows=1)
df = pd.read_csv(args.input_csv)
coltypes = {}
for col in df.columns:
    coltypes[col] = "string" if df[col].dtype == np.dtype('object') or df[col].dtype == np.dtype('bool') or df[col].isnull().values.any() else "double"

if not args.metric_column:
    for col in df.columns:
        if coltypes[col] == "double":
            args.metric_column = col
            print "No metric column specified (--metric_column); automatically using '%s' as metric column" % col
            break
    
query = open(args.query_filename, 'w')
    
query.write("IMPORT FROM CSV FILE '%s' INTO %s(%s);\n" % (args.input_csv, args.query_table, ", ".join(["%s %s" % (col, coltypes[col]) for col in coltypes])))

try:
    os.remove(args.results_filename)
except OSError:
    pass

# split by percentile
query.write('''SELECT * FROM DIFF
  (SPLIT (
    SELECT *, percentile(%s) as percentile FROM %s)
  WHERE percentile > %s)
ON * INTO OUTFILE '%s' FIELDS TERMINATED BY ',';\n\n''' % (args.metric_column, args.query_table, args.percentile, args.results_filename))

query.close()

os.system("cat %s | %s %s" % (args.query_filename, args.sql_path, " > /dev/null 2>&1" if not args.verbose else ""))

# GENERATE OUTPUT_DICT

def filter_dict(df, dic):
    return df[df[dic.keys()].apply(
            lambda x: x.equals(pd.Series(dic.values(), index=x.index, name=x.name)), axis=1)]

# read in input and then write out JSON and HTML

mb_df = pd.read_csv(args.results_filename)

overall_metrics = df[args.metric_column].tolist()
reference_hist, reference_bins = np.histogram(overall_metrics, bins=args.hist_plot_bins, normed=True)

output_dict = []
out_html = ""

os.system('rm output/* > /dev/null 2>&1; mkdir output > /dev/null 2>&1')

for index, row in mb_df.head(n=args.max_results).iterrows():
    support = row["support"]
    ratio = row["global_ratio"]
    count = row["outlier_count"]
    explanation = {}
    for col in mb_df.columns:
        if pd.notnull(row[col]) and col not in ["outlier_count", "support", "global_ratio"]:
            explanation[col] = row[col]
    explanation_metrics = filter_dict(df, explanation)[args.metric_column].tolist()
    explanation_hist, explanation_bins = np.histogram(explanation_metrics, bins=args.hist_plot_bins, normed=True)
    explanation_name = ", ".join(k+"= "+str(v) for k, v in explanation.iteritems()),
    output_dict.append({ "support": support,
                    "ratio": ratio,
                    "count": count,
                    "metric": args.metric_column,
                    "simple_name": explanation_name,
                    "explanation": explanation,
                    "explanation_hist_x": explanation_bins.tolist(),
                    "explanation_hist_y": explanation_hist.tolist(),                    
                    "reference_hist_x": reference_bins.tolist(),
                    "reference_hist_y": reference_hist.tolist() })

    out_html += '''
    <div class="explanation">
      <h3>%s</h3>
      <div>ratio: %.2f</div>
      <div>support: %.2f (%d)</div>
      <img width=400 src="output/%s.png" />
    </div>
    <hr />
    ''' % (explanation_name, support, count, ratio, index)

    plt.clf()

    plt.hist(overall_metrics, bins=args.hist_plot_bins, normed=1, color="grey", alpha=0.9, linewidth=0)
    plt.hist(explanation_metrics, bins=args.hist_plot_bins, normed=1, color="blue", alpha=0.9, linewidth=0)

    plt.xlabel("%s" % args.metric_column)
    plt.ylabel("probability")
    #plt.xlim(xmin=min(explanation_metrics), xmax=max(explanation_metrics))
    plt.savefig("output/%s.png" % (str(index)), width=800)

    
open(args.html_output, 'w').write('''
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <style>
    @media (min-width: 48em) {
    .container {
    max-width: 46rem;
    }
    }
    </style>

    <title>MacroBase Results</title>
  </head>
  <body>
    <div class="container">
    <h1>MacroBase Results</h1>
    <div class="row">
    <div class="col-lg-12">
    %s
    </div>
    </div>
    </div>
    </body>
    
    ''' % out_html)
    
open(args.json_output, 'w').write("mbout ="+json.dumps(output_dict))

    
    
    
